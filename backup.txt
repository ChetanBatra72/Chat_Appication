html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Wassup chat app</title>
    <link rel="stylesheet" href="/style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.css">
  </head>

  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />

  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />

  <body>
    <section class="chat__section">
      <div class="brand">
        <div class="banner">
          <img height="80" c src="/rand2.png" alt="" />
          <h1>CrickSip</h1>
        </div>
        <div class="active-theme">
          <p id="active-users" class="dark-theme">Active Users: 1 <br /></p>
          <button id="theme-toggle">
            <i class="gg-moon"></i>
          </button>
        </div>
      </div>
      <div class="message__area"></div>
      <div>
        <textarea
          id="textarea"
          cols="30"
          rows="1"
          placeholder="Write a message..."
        ></textarea>
        <div class="footer">
          <p class="footer-text">Built by: Chetan Batra</p>
          <div class="social-icons">
          
            <a href="https://www.linkedin.com/in/chetan-batra-17b8731b7/" target="_blank">
              <i class="fab fa-linkedin"></i>
            </a>
        
            <a href="https://github.com/ChetanBatra72" target="_blank">
              <i class="fab fa-github"></i>
            </a>
          </div>
        </div>
        
    </section>
    <!-- <audio id="joinSound">
        <source src="/pop.mp3" type="audio/mp3">
        Your browser does not support the audio element.
    </audio> -->
    <script
      src="https://kit.fontawesome.com/a53433829a.js"
      crossorigin="anonymous"
    ></script>
    <link
      href="https://unpkg.com/css.gg@2.0.0/icons/css/sun.css"
      rel="stylesheet"
    />
    <link
      href="https://unpkg.com/css.gg@2.0.0/icons/css/moon.css"
      rel="stylesheet"
    />
    <script src="/socket.io/socket.io.js"></script>
    <script src="/client.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/emojionearea/3.4.2/emojionearea.min.js"></script>
    
    <script>
      $(document).ready(function () {
        // Initialize the Emoji Picker
        $("#textarea").emojioneArea({
          pickerPosition: "top",
          events: {
            keydown: function (editor, event) {
              if (event.which === 13 && !event.shiftKey) {
                event.preventDefault(); // Prevent the default "Enter" key behavior (line break)
                sendMessage(editor.html()); // Send the message
                editor.html(""); // Clear the editor content
              }
            },
          },
        });
      });
    </script>
  </body>
 
</html>

css
@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");
* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

body {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: #f8f8f8;
  font-family: "Roboto", sans-serif;
}

section.chat__section {
  /* width: 800px; */
  width: 90%;
  /* max-width: 100%; */
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background: #fff;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
    0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

.brand {
  padding: 20px;
  background: #f1f1f1;
  display: flex;
  /* align-items: ; */
  justify-content: space-between;
}

.banner {
  /* background-color: blue; */
  display: flex;
  align-items: center;
}

.brand h1 {
  text-transform: uppercase;
  font-size: 20px;
  color: #444;
  margin-left: 10px;
}
.message__area {
  /* background-color: #333; */
  flex-grow: 1;
 
  height: 500px;
  padding: 16px;
  display: flex;
  flex-direction: column;
  overflow-y: scroll;
  padding-top: 40px;
  background-image: url("crick.png");
  background-position: center;
  background-repeat: no-repeat;
 
  

}

textarea {
  width: 100%;
  border: none;
  padding: 20px;
  font-size: 16px;
  outline: none;
  background: #fbfbfb;
}

.message {
  padding: 20px;
  border-radius: 4px;
  margin-bottom: 40px;
  max-width: 300px;
  position: relative;
  /* overflow: hidden; */
}
.incoming {
  background: #8f8be8;
  color: #fff;
  height: auto;
  /* overflow: hidden; */
}
.outgoing {
  /* background: #e9eafd; */
  color: white;
  background-color: #bcbcbc;
  margin-left: auto;
  /* height: auto;
    overflow: hidden; */
}
.message h4 {
  position: absolute;
  top: -20px;
  left: 0;
  color: #e9b421;
  font-size: 14px;
}
/* Add this CSS at the end of your existing CSS file */
body.dark-theme {
  background-color: #222;
  color: #fff;
}

.brand button {
  /* background-color: #444; */
  color: white;
  background-color: #333;
  border: none;
  padding: 16px 16px;
  cursor: pointer;
  border-radius: 100%;
}

i {
  font-size: 29px;
}

/* Your existing CSS code... */

/* Add this to the end of your CSS file */
body.dark-theme {
  background-color: #222;
  color: #fff;
}

.message__area.dark-theme {
  background-color: #333;
  color: #fff;
}

.brand.dark-theme {
  background-color: #333;
  color: #fff;
}

#active-users {
  color: #8f8be8;
}
/* Add this to your existing CSS */
.timestamp {
  font-size: 12px;
  color: #888;
  margin-left: 10px;
}
.typing-indicator {
  font-size: 12px;
  color: #888;
  margin-left: 10px;
  margin-top: -16px;
}

/* End of the added CSS */
.delete-button {
  color: white;
  border: none;
  color: #222;
  font-size: 18px;
  padding: 4px 4px;
  border-radius: 100px;
  background-color: #444;
  /* font-size: 12px; */
  cursor: pointer;
}

.active-theme {
  /* background-color: #222; */
  display: flex;
  gap: 20px;
  align-items: center;
}


/* Adjust the font size and colors as needed for your design */
.footer {
  background-color: #333;
  color: #fff;
  text-align: center;
  padding: 10px 0;
  
}
.social-icons a + a {
  margin-left: 10px; /* Adjust the margin as needed */
}

client
const socket = io();
let name;
let textarea = document.querySelector("#textarea");
let messageArea = document.querySelector(".message__area");
let activeUsersElement = document.querySelector("#active-users");
let themeToggle = document.querySelector("#theme-toggle");
let currUser = document.querySelector(".active-theme");
let isDarkTheme = false;
let userElement = document.createElement("h4");

const darkColors = [
  "#222",
  "#333",
  "#444",
  "#555",
  "#666",
  "#777",
  "#888",
  "#999",
  "#aaa",
];
do {
  name = prompt("Please enter your name: ");
  const para = document.createElement("p");
  let uName =  " üë§ " + name;
  para.innerText = uName;
  // currUser.appendChild(para);
  currUser.insertBefore(para, currUser.children[0]);
  console.log(para);
} while (!name);
// Use the "keydown" event instead of "keyup"
textarea.addEventListener("keydown", (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault(); // Prevent the default Enter key behavior (new line)
    sendMessage(textarea.value);
  }
});
// Notify the server when the user joins
socket.emit("userJoined", { userName: name });

function formatTimestamp(date) {
  const options = { hour: "numeric", minute: "numeric" };
  return date.toLocaleTimeString(undefined, options);
}

function sendMessage(message) {
  let msg = {
    user: name,
    message: message.trim(),
    id: Date.now(), // Assign a unique identifier to each message
  };
  // Append
  appendMessage(msg, "outgoing");
  textarea.value = "";
  scrollToBottom();

  // Send to server
  socket.emit("message", msg);
}

function appendMessage(msg, type) {
  let mainDiv = document.createElement("div");
  let className = type;
  mainDiv.classList.add(className, "message");
  mainDiv.dataset.messageId = msg.id; // Add the message id as a dataset attribute
  mainDiv.dataset.messageUser = msg.user; // Add the message user as a dataset attribute

  let deleteButton = "";
  if (msg.user === name) {
    deleteButton = `<button class="delete-button" data-message-id="${msg.id}" data-message-user="${msg.user}">üóëÔ∏è</i></button>`;
  }

  let markup = `
        <h4>${msg.user}</h4>
        <p>${msg.message}</p>
        <span class="timestamp">${formatTimestamp(new Date())}</span>
        ${deleteButton}
    `;
  mainDiv.innerHTML = markup;
  messageArea.appendChild(mainDiv);
 // Generate a random dark color
 const randomColor = darkColors[Math.floor(Math.random() * darkColors.length)];
 userElement.style.color = 'randomColor';
}

document.addEventListener("click", (event) => {
  if (event.target.classList.contains("delete-button")) {
    console.log(event.target.classList.contains("trash"));
    const messageId = event.target.getAttribute("data-message-id");
    const messageUser = event.target.getAttribute("data-message-user");

    if (messageUser === name) {
      const deleteForEveryone = confirm(
        "Do you want to delete this message for everyone?"
      );

      if (deleteForEveryone) {
        socket.emit("deleteMessage", { messageId, userName: messageUser });
      }
    }
  }
});

document.addEventListener("click", (event) => {
  if (event.target.classList.contains("trash")) {
    console.log(event.target.classList.contains("trash"));
    const messageId = event.target.getAttribute("data-message-id");
    const messageUser = event.target.getAttribute("data-message-user");

    if (messageUser === name) {
      const deleteForEveryone = confirm(
        "Do you want to delete this message for everyone?"
      );

      if (deleteForEveryone) {
        socket.emit("deleteMessage", { messageId, userName: messageUser });
      }
    }
  }
});

// ... Rest of your client.js code ...

// Add this code to receive and handle message deletion
socket.on("messageDeleted", (deletedMessageId) => {
  const messageToDelete = document.querySelector(
    `[data-message-id="${deletedMessageId}"]`
  );
  if (messageToDelete) {
    messageToDelete.remove();
  }
});
// Receive messages

socket.on("message", (msg) => {
  appendMessage(msg, "incoming");
  scrollToBottom();
});

// Receive active user count
socket.on("activeUsers", (count) => {
  updateActiveUserCount(count);
});

// Display a system message when a user joins
socket.on("message", (msg) => {
  // Check if the message is a user join notification
  if (msg.user !== "System" && msg.message.includes("joined the chat room")) {
    appendSystemMessage(msg.message);
  }
});

// Initialize active user count and theme toggle
socket.on("connect", () => {
  socket.emit("activeUsers", 1); // Inform the server that you are an active user
  updateActiveUserCount(1);

  themeToggle.addEventListener("click", toggleTheme);
});

function updateActiveUserCount(count) {
  activeUsersElement.innerText = `Active Users: ${count}`;
}

function toggleTheme() {
  isDarkTheme = !isDarkTheme;
  document.body.classList.toggle("dark-theme", isDarkTheme);
  messageArea.classList.toggle("dark-theme", isDarkTheme);
  activeUsersElement.classList.toggle("dark-theme", isDarkTheme);
  if (!isDarkTheme) {
    message.userElement.style.color = "#e9b421";
  }
}

function scrollToBottom() {
  messageArea.scrollTop = messageArea.scrollHeight;
}

// Append a system message
function appendSystemMessage(message) {
  let mainDiv = document.createElement("div");
  mainDiv.classList.add("system-message", "message", "rand");

  let markup = `
        <p>${message}</p>
    `;
  mainDiv.innerHTML = markup;
  messageArea.appendChild(mainDiv);
}

// let isTrue = false;
let btn = document.querySelector("i");

themeToggle.addEventListener("click", (e) => {
  console.log(e);
  btn.classList.toggle("gg-sun");
  btn.classList.toggle("gg-moon");
  if (btn.classList.contains("gg-moon")) {
    console.log("heybro");
    btn.style.color = "white";
    themeToggle.style.backgroundColor = "#333";
    console.log(toggleTheme);
  } else {
    btn.style.color = "black";
    themeToggle.style.backgroundColor = "#99e9f2";
    // console.log(toggleTheme);
  }
});

server
const express = require('express');
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http);

const PORT = process.env.PORT || 3000;

let activeUsers = 0; // Track active user count

http.listen(PORT, () => {
    console.log(`Listening on port ${PORT}`);
});

app.use(express.static(__dirname + '/public'));

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

io.on('connection', (socket) => {
    console.log('Connected...');
    
    activeUsers++; // Increment active users count
    
    io.emit('activeUsers', activeUsers); // Emit active user count to all clients

    socket.on('userJoined', (data) => {
        const userJoinedMessage = `${data.userName} joined the chat room`;
        io.emit('message', { user: 'System', message: userJoinedMessage });
    });

    socket.on('message', (msg) => {
        socket.broadcast.emit('message', msg);
    });

    socket.on('deleteMessage', (data) => {
        const { messageId, userName } = data;
        
        io.emit('messageDeleted', messageId, userName);
    });

    socket.on('disconnect', () => {
        activeUsers--; // Decrement active users count on disconnect
        io.emit('activeUsers', activeUsers); // Emit updated count to all clients
    });
});